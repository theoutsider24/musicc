# MUSICC - Multi User Scenario Catalogue for Connected and Autonomous Vehicles
# Copyright (C)2020 Connected Places Catapult
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: musicc-support@cp.catapult.org.uk
#          https://cp.catapult.org.uk/case-studies/musicc/'
#
"""
Django settings for musicc project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
from .logconfig import *
import logging.config
from django.core.management.utils import get_random_secret_key

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
DOWNLOAD_DIR = os.path.join(BASE_DIR, "Downloads")


try:
    from .secret_key import SECRET_KEY
except ImportError:
    SETTINGS_DIR = os.path.abspath(os.path.dirname(__file__))
    with open(os.path.join(SETTINGS_DIR, 'secret_key.py'), "w+") as secret_key_file:
        secret_key_file.write('SECRET_KEY = "{0}"'.format(get_random_secret_key()))
    from .secret_key import SECRET_KEY


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django_user_agents",
    "rolepermissions",
    "musicc",
    "django_nose",
    "django_db_logger",
]

TEST_RUNNER = "django_nose.NoseTestSuiteRunner"

NOSE_ARGS = [
    "--with-coverage",
    "--cover-erase",
    "--cover-package=musicc",
    "--cover-inclusive",
    "--with-xunit",
    "--xunit-file=test_artefacts/nosetests.xml",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_user_agents.middleware.UserAgentMiddleware",
]

ROOT_URLCONF = "musicc.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "musicc.context_processors.version",
            ]
        },
    }
]

WSGI_APPLICATION = "musicc.wsgi.application"


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")


MEDIA_ROOT = os.path.join(STATIC_ROOT, "media", "img")
MEDIA_URL = '/media/'

LOGIN_REDIRECT_URL = "/"
LOGOUT_REDIRECT_URL = "/"

ROLEPERMISSIONS_MODULE = "musicc.roles"

logging.config.dictConfig(LOGGING)

ENABLED_FEATURES = ["comments", "tagging"]


REQUIRES_APPROVAL = ["musicc_create"]
ADMIN_REQUIRES_APPROVAL = os.environ.get("MUSICC_ADMIN_REQUIRES_APPROVAL","False").lower() == "true"
MUSICC_VERSION = "1.0.0"


SECURE_SSL_REDIRECT = os.environ.get("SSLEngine","off") == "on"
SESSION_COOKIE_SECURE = SECURE_SSL_REDIRECT
CSRF_COOKIE_SECURE = SECURE_SSL_REDIRECT

MASTER_HOST = os.environ.get("MUSICC_MASTER_HOST", "https://musicc.ts-catapult.org.uk")
POSTGRES_HOST = os.environ.get("MUSICC_POSTGRES_HOST", "localhost")
POSTGRES_PORT =  int(os.environ.get("MUSICC_POSTGRES_PORT", "5432"))
POSTGRES_NAME = os.environ.get("MUSICC_POSTGRES_NAME", "postgres")
POSTGRES_USER = os.environ.get("MUSICC_POSTGRES_USER", "postgres")
POSTGRES_PASSWORD = os.environ.get("MUSICC_POSTGRES_PASSWORD", "postgres")


DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_NAME,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "HOST": POSTGRES_HOST,
        "PORT": POSTGRES_PORT,
    }
}

DEBUG = os.environ.get("MUSICC_DEBUG_MODE","FALSE").lower() == "false"

ALLOWED_HOSTS = ["*"]



EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

DEFAULT_FROM_EMAIL = os.environ.get("MUSICC_DEFAULT_FROM_EMAIL", "webmaster@localhost")
EMAIL_USE_TLS = os.environ.get("MUSICC_EMAIL_USE_TLS","FALSE").lower() == "true"
EMAIL_HOST = os.environ.get("MUSICC_EMAIL_HOST", "localhost")
EMAIL_PORT = int(os.environ.get("MUSICC_EMAIL_PORT", "25"))
EMAIL_HOST_USER = os.environ.get("MUSICC_EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = os.environ.get("MUSICC_EMAIL_HOST_PASSWORD", "")


DOCUMENTATION_ROOT  = os.path.join(BASE_DIR)
DOCUMENTATION_HTML_ROOT = os.path.join(BASE_DIR, 'static')
DOCUMENTATION_ACCESS_FUNCTION = lambda user: bool(user)
